# Generated by Django 5.2.3 on 2025-07-18 17:10

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unikalny identyfikator UUID dla kategorii.', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nazwa kategorii.', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Opcjonalny opis kategorii.', null=True)),
            ],
            options={
                'verbose_name': 'Kategoria',
                'verbose_name_plural': 'Kategorie',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unikalny identyfikator UUID dla tagu.', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Nazwa tagu.', max_length=100, unique=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tagi',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unikalny identyfikator UUID dla testu.', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Tytuł testu.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Opcjonalny opis testu.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data i czas utworzenia testu.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data i czas ostatniej aktualizacji testu.')),
                ('categories', models.ManyToManyField(blank=True, help_text='Kategorie, do których należy test.', related_name='tests', to='api_v1.category')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Testy',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unikalny identyfikator UUID dla pytania.', primary_key=True, serialize=False)),
                ('text', models.TextField(help_text='Treść pytania.')),
                ('image', models.URLField(blank=True, help_text='Opcjonalny link URL do obrazka powiązanego z pytaniem.', max_length=1024, null=True)),
                ('explanation', models.TextField(blank=True, help_text='Opcjonalne wyjaśnienie poprawnej odpowiedzi.', null=True)),
                ('question_type', models.CharField(choices=[('single-choice', 'Jednokrotnego wyboru'), ('multiple-choice', 'Wielokrotnego wyboru'), ('open-ended', 'Otwarte')], default='single-choice', help_text='Typ pytania (jednokrotnego wyboru, wielokrotnego wyboru, otwarte).', max_length=20)),
                ('grading_criteria', models.TextField(blank=True, help_text='Kryteria oceny dla pytań otwartych.', null=True)),
                ('max_points', models.PositiveIntegerField(blank=True, help_text='Maksymalna liczba punktów dla pytań otwartych.', null=True)),
                ('tags', models.ManyToManyField(blank=True, help_text='Tagi powiązane z pytaniem.', related_name='questions', to='api_v1.tag')),
                ('test', models.ForeignKey(help_text='Test, do którego przypisane jest to pytanie.', on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='api_v1.test')),
            ],
            options={
                'verbose_name': 'Pytanie',
                'verbose_name_plural': 'Pytania',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unikalny identyfikator UUID dla odpowiedzi.', primary_key=True, serialize=False)),
                ('text', models.CharField(help_text='Treść odpowiedzi.', max_length=1024)),
                ('is_correct', models.BooleanField(default=False, help_text='Czy ta odpowiedź jest poprawna?')),
                ('question', models.ForeignKey(help_text='Pytanie, do którego przypisana jest ta odpowiedź.', on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='api_v1.question')),
            ],
            options={
                'verbose_name': 'Odpowiedź',
                'verbose_name_plural': 'Odpowiedzi',
                'ordering': ['id'],
                'indexes': [models.Index(fields=['question'], name='answer_question_id_idx')],
                'constraints': [models.UniqueConstraint(fields=('question', 'text'), name='unique_answer_text_for_question')],
            },
        ),
        migrations.CreateModel(
            name='ReportedIssue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('issue_type', models.CharField(choices=[('QUESTION_ERROR', 'Błąd w pytaniu/odpowiedzi'), ('AI_GRADING_ERROR', 'Niesłuszna ocena AI')], help_text='Typ zgłoszonego problemu.', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Opcjonalny opis problemu od użytkownika.', null=True)),
                ('ai_feedback_snapshot', models.TextField(blank=True, help_text="Zapisana odpowiedź AI w momencie zgłoszenia (dla zgłoszeń typu 'AI_GRADING_ERROR').", null=True)),
                ('user_answer_open', models.TextField(blank=True, help_text='Odpowiedź użytkownika dla pytań otwartych.', null=True)),
                ('user_answer_choices', models.JSONField(blank=True, help_text='Zaznaczone opcje przez użytkownika dla pytań zamkniętych (przechowywane jako lista tekstów).', null=True)),
                ('status', models.CharField(choices=[('NEW', 'Nowe'), ('IN_PROGRESS', 'W trakcie analizy'), ('RESOLVED', 'Rozwiązane'), ('REJECTED', 'Odrzucone')], default='NEW', help_text='Aktualny status zgłoszenia.', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data i czas utworzenia zgłoszenia.')),
                ('question', models.ForeignKey(help_text='Pytanie, którego dotyczy zgłoszenie.', on_delete=django.db.models.deletion.CASCADE, related_name='reported_issues', to='api_v1.question')),
                ('test', models.ForeignKey(help_text='Test, w którym wystąpiło zgłoszenie.', on_delete=django.db.models.deletion.CASCADE, related_name='reported_issues', to='api_v1.test')),
            ],
            options={
                'verbose_name': 'Zgłoszony Problem',
                'verbose_name_plural': 'Zgłoszone Problemy',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['question'], name='reported_issue_question_idx'), models.Index(fields=['test'], name='reported_issue_test_idx'), models.Index(fields=['status'], name='reported_issue_status_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['test'], name='question_test_id_idx'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('test', 'text'), name='unique_question_text_in_test'),
        ),
    ]
