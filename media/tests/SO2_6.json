{
    "category": "Systemy Operacyjne 2",
    "scope": "Wykład 6: Interfejs gniazd i komunikacja sieciowa",
    "version": "1.1",
    "questions": [
        {
            "id": 901,
            "questionText": "Czym jest interfejs gniazd (sockets)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "sieci", "api"],
            "options": [
                "Fizycznym portem w komputerze, do którego podłącza się kabel sieciowy.",
                "Zestawem sterowników do obsługi kart sieciowych.",
                "Interfejsem programistycznym (API) umożliwiającym procesom komunikację przez sieć.",
                "Protokołem służącym do kompresji danych przed wysłaniem."
            ],
            "correctAnswers": [2],
            "explanation": "Interfejs gniazd to standardowy interfejs API, który pozwala aplikacjom na wysyłanie i odbieranie danych przez sieć, abstrahując od szczegółów implementacyjnych niższych warstw sieciowych."
        },
        {
            "id": 902,
            "questionText": "Który protokół z warstwy transportowej zapewnia niezawodną, połączeniową transmisję danych w formie strumienia (Stream sockets)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "protokoły", "tcp"],
            "options": [
                "UDP",
                "TCP",
                "IP",
                "ICMP"
            ],
            "correctAnswers": [1],
            "explanation": "TCP (Transmission Control Protocol) jest protokołem połączeniowym, który gwarantuje dostarczenie danych w odpowiedniej kolejności i bez błędów, tworząc wirtualny 'strumień' danych między dwoma punktami."
        },
        {
            "id": 903,
            "questionText": "Do czego najczęściej wykorzystywany jest protokół UDP?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "protokoły", "udp"],
            "options": [
                "Do przesyłania stron internetowych (HTTP).",
                "Do transferu plików (FTP), gdzie liczy się niezawodność.",
                "Do transmisji, gdzie kluczowa jest szybkość, a utrata pojedynczych pakietów jest akceptowalna (np. gry online, streaming wideo).",
                "Do ustanawiania bezpiecznych, szyfrowanych połączeń."
            ],
            "correctAnswers": [2],
            "explanation": "UDP (User Datagram Protocol) to protokół bezpołączeniowy, który nie gwarantuje dostarczenia pakietów. Jego zaletą jest niski narzut i szybkość, co czyni go idealnym dla aplikacji czasu rzeczywistego."
        },
        {
            "id": 904,
            "questionText": "Jaka jest główna rola protokołu IP (Internet Protocol)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "protokoły", "ip"],
            "options": [
                "Dzielenie danych na segmenty i zapewnienie ich poprawnej kolejności.",
                "Zarządzanie sesjami między aplikacjami.",
                "Adresowanie hostów w sieci i hermetyzacja danych w pakiety w celu ich routingu.",
                "Obsługa nazw domenowych (DNS)."
            ],
            "correctAnswers": [2],
            "explanation": "Protokół IP działa w warstwie sieciowej i jest odpowiedzialny za logiczne adresowanie urządzeń (adresy IP) oraz za pakowanie i trasowanie (routing) danych przez sieci."
        },
        {
            "id": 905,
            "questionText": "Do czego służy protokół ICMP (Internet Control Message Protocol)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "protokoły", "icmp"],
            "options": [
                "Do przesyłania plików.",
                "Do nawiązywania połączeń TCP.",
                "Do wysyłania komunikatów o błędach i komunikatów kontrolnych dotyczących działania sieci (np. używany przez polecenie `ping`).",
                "Do szyfrowania danych."
            ],
            "correctAnswers": [2],
            "explanation": "ICMP jest protokołem pomocniczym, używanym przez urządzenia sieciowe do wysyłania komunikatów o błędach (np. 'Host nieosiągalny') i informacji operacyjnych (np. 'echo request' w poleceniu ping)."
        },
        {
            "id": 906,
            "questionText": "W której warstwie modelu ISO/OSI operuje protokół FTP (File Transfer Protocol)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "protokoły", "ftp"],
            "options": [
                "W warstwie fizycznej",
                "W warstwie transportowej",
                "W warstwie aplikacji",
                "W warstwie sieciowej"
            ],
            "correctAnswers": [2],
            "explanation": "FTP jest protokołem warstwy aplikacji, który definiuje zasady przesyłania plików między klientem a serwerem, korzystając z usług protokołu TCP w warstwie transportowej."
        },
        {
            "id": 907,
            "questionText": "Czym charakteryzują się gniazda datagramowe (Datagram Sockets)?",
            "image": "",
            "type": "open-ended",
            "tags": ["gniazda", "datagram", "udp"],
            "gradingCriteria": "Odpowiedź musi zawierać kluczowe cechy: 1. Są bezpołączeniowe (nie ma formalnego nawiązywania i zakańczania sesji). 2. Nie gwarantują dostarczenia, kolejności ani braku duplikacji pakietów. 3. Operują na odrębnych komunikatach (datagramach). 4. Zazwyczaj używają protokołu UDP. Pełna punktacja za wymienienie co najmniej trzech z tych cech.",
            "maxPoints": 5
        },
        {
            "id": 908,
            "questionText": "Opisz, czym są gniazda strumieniowe (Stream Sockets).",
            "image": "",
            "type": "open-ended",
            "tags": ["gniazda", "stream", "tcp"],
            "gradingCriteria": "Odpowiedź musi zawierać kluczowe cechy: 1. Są połączeniowe (wymagają nawiązania połączenia przed transmisją). 2. Zapewniają niezawodną, uporządkowaną transmisję danych. 3. Traktują dane jako ciągły strumień bajtów, bez granic komunikatów. 4. Zazwyczaj używają protokołu TCP. Pełna punktacja za wymienienie co najmniej trzech z tych cech.",
            "maxPoints": 5
        },
        {
            "id": 909,
            "questionText": "Które pliki nagłówkowe są fundamentalne dla programowania gniazd w systemach uniksowych?",
            "image": "/static/jakinaglowek.png",
            "type": "multiple-choice",
            "tags": ["gniazda", "api", "nagłówki", "programowanie"],
            "options": [
                "<stdio.h>",
                "<sys/types.h>",
                "<sys/socket.h>",
                "<netdb.h>"
            ],
            "correctAnswers": [1, 2],
            "explanation": "Plik <sys/types.h> dostarcza podstawowych definicji typów danych, a <sys/socket.h> zawiera główne definicje struktur i stałych oraz deklaracje funkcji API gniazd."
        },
        {
            "id": 910,
            "questionText": "Jaka jest rola funkcji `socket()` w Socket API?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "api", "socket"],
            "options": [
                "Wysłanie danych przez istniejące gniazdo.",
                "Oczekiwanie na połączenie przychodzące.",
                "Utworzenie punktu końcowego komunikacji (gniazda) i zwrócenie jego deskryptora.",
                "Powiązanie gniazda z adresem IP i numerem portu."
            ],
            "correctAnswers": [2],
            "explanation": "Funkcja `socket()` jest pierwszym krokiem w komunikacji sieciowej. Tworzy ona gniazdo określonego typu (np. strumieniowe) i rodziny protokołów (np. internetowej), zwracając deskryptor pliku, który go reprezentuje."
        },
        {
            "id": 911,
            "questionText": "Wskaż, który parametr funkcji `socket(rodzina, typ, protokol)` określa, czy gniazdo będzie strumieniowe (TCP) czy datagramowe (UDP).",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "api", "socket"],
            "options": [
                "rodzina",
                "typ",
                "protokol",
                "Żaden z powyższych"
            ],
            "correctAnswers": [1],
            "explanation": "Parametr `typ` określa semantykę komunikacji. Należy podać stałą `SOCK_STREAM` dla gniazda strumieniowego (TCP) lub `SOCK_DGRAM` dla gniazda datagramowego (UDP)."
        },
        {
            "id": 912,
            "questionText": "Do czego służy funkcja `bind()` w kontekście serwera?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "api", "bind", "serwer"],
            "options": [
                "Do nawiązania połączenia z serwerem.",
                "Do nasłuchiwania na przychodzące połączenia.",
                "Do przypisania gniazdu lokalnego adresu (IP i numeru portu), pod którym będzie ono nasłuchiwać.",
                "Do zamknięcia gniazda i zwolnienia zasobów."
            ],
            "correctAnswers": [2],
            "explanation": "Serwer musi użyć funkcji `bind()`, aby powiązać utworzone gniazdo z konkretnym adresem i portem, dzięki czemu klienci wiedzą, gdzie mają się łączyć."
        },
        {
            "id": 913,
            "questionText": "Jaka jest rola funkcji `listen()` i `accept()` po stronie serwera w komunikacji TCP?",
            "image": "",
            "type": "open-ended",
            "tags": ["gniazda", "api", "listen", "accept", "serwer", "tcp"],
            "gradingCriteria": "Odpowiedź musi zawierać dwie części: 1. `listen()`: Przekształca gniazdo w gniazdo pasywne (nasłuchujące), gotowe do akceptowania połączeń przychodzących i ustawia rozmiar kolejki oczekujących połączeń. 2. `accept()`: Blokuje wykonanie do momentu nadejścia połączenia od klienta, a następnie tworzy dla tego połączenia nowe gniazdo i zwraca jego deskryptor. Pełna punktacja za poprawne opisanie obu funkcji.",
            "maxPoints": 6
        },
        {
            "id": 914,
            "questionText": "Której funkcji używa klient, aby nawiązać połączenie z serwerem TCP?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "api", "connect", "klient", "tcp"],
            "options": [
                "bind()",
                "accept()",
                "send()",
                "connect()"
            ],
            "correctAnswers": [3],
            "explanation": "Klient po utworzeniu gniazda używa funkcji `connect()`, podając adres i port serwera, aby zainicjować trójfazowe uzgadnianie (three-way handshake) i nawiązać połączenie TCP."
        },
        {
            "id": 915,
            "questionText": "Które funkcje są używane do wysyłania i odbierania danych w gniazdach strumieniowych (TCP)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "api", "send", "recv", "tcp"],
            "options": [
                "sendto() i recvfrom()",
                "write() i read()",
                "send() i recv()",
                "put() i get()"
            ],
            "correctAnswers": [2],
            "explanation": "W gniazdach połączeniowych (strumieniowych) do transmisji danych używa się funkcji `send()` i `recv()`. Można też używać standardowych `write()` i `read()`, ponieważ gniazda są reprezentowane przez deskryptory plików."
        },
        {
            "id": 916,
            "questionText": "Czym różnią się funkcje `sendto()` i `recvfrom()` od `send()` i `recv()`?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "api", "sendto", "recvfrom", "udp"],
            "options": [
                "Są używane do wysyłania danych szyfrowanych.",
                "Są przeznaczone dla gniazd datagramowych (UDP) i wymagają podania adresu docelowego przy wysyłaniu lub pozwalają uzyskać adres źródłowy przy odbieraniu.",
                "Są to starsze, przestarzałe wersje `send()` i `recv()`.",
                "Są używane wyłącznie do komunikacji wewnątrz jądra systemu."
            ],
            "correctAnswers": [1],
            "explanation": "Ponieważ gniazda datagramowe są bezpołączeniowe, każda operacja wysłania (`sendto`) musi zawierać adres docelowy. Analogicznie, `recvfrom` zwraca nie tylko dane, ale również adres nadawcy, który je przysłał."
        },
        {
            "id": 917,
            "questionText": "Którego protokołu z warstwy transportowej domyślnie używają gniazda datagramowe (Datagram Sockets)?",
            "image": "",
            "type": "single-choice",
            "tags": ["gniazda", "datagram", "udp", "protokoły"],
            "options": [
                "TCP",
                "UDP",
                "ICMP",
                "FTP"
            ],
            "correctAnswers": [1],
            "explanation": "Gniazda datagramowe są zaimplementowane w oparciu o protokół UDP (User Datagram Protocol), który zapewnia szybką, bezpołączeniową komunikację bez gwarancji dostarczenia."
        }
    ]
}
